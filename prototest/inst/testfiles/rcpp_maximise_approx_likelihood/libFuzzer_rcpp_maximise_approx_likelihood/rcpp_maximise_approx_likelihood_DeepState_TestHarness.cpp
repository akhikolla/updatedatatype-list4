// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// rcpp_maximise_approx_likelihood_DeepState_TestHarness_generation.cpp and rcpp_maximise_approx_likelihood_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix rcpp_maximise_approx_likelihood(const NumericMatrix& y_mat, const NumericMatrix& V, const NumericVector& groups, const NumericVector& mu, double sigma);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix y_mat  = RcppDeepState_NumericMatrix();
  std::string y_mat_t = "/home/akhila/fuzzer_packages/fuzzedpackages/prototest/inst/testfiles/rcpp_maximise_approx_likelihood/libFuzzer_rcpp_maximise_approx_likelihood/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_y_mat.qs";
  qs::c_qsave(y_mat,y_mat_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y_mat values: "<< y_mat << std::endl;
  NumericMatrix V  = RcppDeepState_NumericMatrix();
  std::string V_t = "/home/akhila/fuzzer_packages/fuzzedpackages/prototest/inst/testfiles/rcpp_maximise_approx_likelihood/libFuzzer_rcpp_maximise_approx_likelihood/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_V.qs";
  qs::c_qsave(V,V_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "V values: "<< V << std::endl;
  NumericVector groups  = RcppDeepState_NumericVector();
  std::string groups_t = "/home/akhila/fuzzer_packages/fuzzedpackages/prototest/inst/testfiles/rcpp_maximise_approx_likelihood/libFuzzer_rcpp_maximise_approx_likelihood/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_groups.qs";
  qs::c_qsave(groups,groups_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "groups values: "<< groups << std::endl;
  NumericVector mu  = RcppDeepState_NumericVector();
  std::string mu_t = "/home/akhila/fuzzer_packages/fuzzedpackages/prototest/inst/testfiles/rcpp_maximise_approx_likelihood/libFuzzer_rcpp_maximise_approx_likelihood/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_mu.qs";
  qs::c_qsave(mu,mu_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mu values: "<< mu << std::endl;
  NumericVector sigma(1);
  sigma[0]  = RcppDeepState_double();
  std::string sigma_t = "/home/akhila/fuzzer_packages/fuzzedpackages/prototest/inst/testfiles/rcpp_maximise_approx_likelihood/libFuzzer_rcpp_maximise_approx_likelihood/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_sigma.qs";
  qs::c_qsave(sigma,sigma_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sigma values: "<< sigma << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    rcpp_maximise_approx_likelihood(y_mat,V,groups,mu,sigma[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
