// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// rcpp_maximise_approx_likelihood_DeepState_TestHarness_generation.cpp and rcpp_maximise_approx_likelihood_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix rcpp_maximise_approx_likelihood(const NumericMatrix& y_mat, const NumericMatrix& V, const NumericVector& groups, const NumericVector& mu, double sigma);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix y_mat  = RcppDeepState_NumericMatrix();
  qs::c_qsave(y_mat,"/home/akhila/fuzzer_packages/fuzzedpackages/prototest/inst/testfiles/rcpp_maximise_approx_likelihood/inputs/y_mat.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y_mat values: "<< y_mat << std::endl;
  NumericMatrix V  = RcppDeepState_NumericMatrix();
  qs::c_qsave(V,"/home/akhila/fuzzer_packages/fuzzedpackages/prototest/inst/testfiles/rcpp_maximise_approx_likelihood/inputs/V.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "V values: "<< V << std::endl;
  NumericVector groups  = RcppDeepState_NumericVector();
  qs::c_qsave(groups,"/home/akhila/fuzzer_packages/fuzzedpackages/prototest/inst/testfiles/rcpp_maximise_approx_likelihood/inputs/groups.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "groups values: "<< groups << std::endl;
  NumericVector mu  = RcppDeepState_NumericVector();
  qs::c_qsave(mu,"/home/akhila/fuzzer_packages/fuzzedpackages/prototest/inst/testfiles/rcpp_maximise_approx_likelihood/inputs/mu.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mu values: "<< mu << std::endl;
  NumericVector sigma(1);
  sigma[0]  = RcppDeepState_double();
  qs::c_qsave(sigma,"/home/akhila/fuzzer_packages/fuzzedpackages/prototest/inst/testfiles/rcpp_maximise_approx_likelihood/inputs/sigma.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sigma values: "<< sigma << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    rcpp_maximise_approx_likelihood(y_mat,V,groups,mu,sigma[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
