// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// rcpp_generate_hit_and_run_samples_DeepState_TestHarness_generation.cpp and rcpp_generate_hit_and_run_samples_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix rcpp_generate_hit_and_run_samples(int num_samples, int burn_in, const NumericVector& init_y, const NumericMatrix& A, const NumericVector& b);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  IntegerVector num_samples(1);
  num_samples[0]  = RcppDeepState_int();
  qs::c_qsave(num_samples,"/home/akhila/fuzzer_packages/fuzzedpackages/prototest/inst/testfiles/rcpp_generate_hit_and_run_samples/inputs/num_samples.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "num_samples values: "<< num_samples << std::endl;
  IntegerVector burn_in(1);
  burn_in[0]  = RcppDeepState_int();
  qs::c_qsave(burn_in,"/home/akhila/fuzzer_packages/fuzzedpackages/prototest/inst/testfiles/rcpp_generate_hit_and_run_samples/inputs/burn_in.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "burn_in values: "<< burn_in << std::endl;
  NumericVector init_y  = RcppDeepState_NumericVector();
  qs::c_qsave(init_y,"/home/akhila/fuzzer_packages/fuzzedpackages/prototest/inst/testfiles/rcpp_generate_hit_and_run_samples/inputs/init_y.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "init_y values: "<< init_y << std::endl;
  NumericMatrix A  = RcppDeepState_NumericMatrix();
  qs::c_qsave(A,"/home/akhila/fuzzer_packages/fuzzedpackages/prototest/inst/testfiles/rcpp_generate_hit_and_run_samples/inputs/A.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "A values: "<< A << std::endl;
  NumericVector b  = RcppDeepState_NumericVector();
  qs::c_qsave(b,"/home/akhila/fuzzer_packages/fuzzedpackages/prototest/inst/testfiles/rcpp_generate_hit_and_run_samples/inputs/b.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "b values: "<< b << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    rcpp_generate_hit_and_run_samples(num_samples[0],burn_in[0],init_y,A,b);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
