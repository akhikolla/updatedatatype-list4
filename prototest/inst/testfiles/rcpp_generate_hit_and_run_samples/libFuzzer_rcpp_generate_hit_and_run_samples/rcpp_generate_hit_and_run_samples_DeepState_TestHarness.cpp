// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// rcpp_generate_hit_and_run_samples_DeepState_TestHarness_generation.cpp and rcpp_generate_hit_and_run_samples_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix rcpp_generate_hit_and_run_samples(int num_samples, int burn_in, const NumericVector& init_y, const NumericMatrix& A, const NumericVector& b);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector num_samples(1);
  num_samples[0]  = RcppDeepState_int();
  std::string num_samples_t = "/home/akhila/fuzzer_packages/fuzzedpackages/prototest/inst/testfiles/rcpp_generate_hit_and_run_samples/libFuzzer_rcpp_generate_hit_and_run_samples/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_num_samples.qs";
  qs::c_qsave(num_samples,num_samples_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "num_samples values: "<< num_samples << std::endl;
  IntegerVector burn_in(1);
  burn_in[0]  = RcppDeepState_int();
  std::string burn_in_t = "/home/akhila/fuzzer_packages/fuzzedpackages/prototest/inst/testfiles/rcpp_generate_hit_and_run_samples/libFuzzer_rcpp_generate_hit_and_run_samples/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_burn_in.qs";
  std::string b_t = "/home/akhila/fuzzer_packages/fuzzedpackages/prototest/inst/testfiles/rcpp_generate_hit_and_run_samples/libFuzzer_rcpp_generate_hit_and_run_samples/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_b.qs";
  qs::c_qsave(burn_in,burn_in_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "burn_in values: "<< burn_in << std::endl;
  NumericVector init_y  = RcppDeepState_NumericVector();
  std::string init_y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/prototest/inst/testfiles/rcpp_generate_hit_and_run_samples/libFuzzer_rcpp_generate_hit_and_run_samples/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_init_y.qs";
  qs::c_qsave(init_y,init_y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "init_y values: "<< init_y << std::endl;
  NumericMatrix A  = RcppDeepState_NumericMatrix();
  std::string A_t = "/home/akhila/fuzzer_packages/fuzzedpackages/prototest/inst/testfiles/rcpp_generate_hit_and_run_samples/libFuzzer_rcpp_generate_hit_and_run_samples/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_A.qs";
  qs::c_qsave(A,A_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "A values: "<< A << std::endl;
  NumericVector b  = RcppDeepState_NumericVector();
  std::string b_t = "/home/akhila/fuzzer_packages/fuzzedpackages/prototest/inst/testfiles/rcpp_generate_hit_and_run_samples/libFuzzer_rcpp_generate_hit_and_run_samples/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_b.qs";
  qs::c_qsave(b,b_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "b values: "<< b << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    rcpp_generate_hit_and_run_samples(num_samples[0],burn_in[0],init_y,A,b);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
