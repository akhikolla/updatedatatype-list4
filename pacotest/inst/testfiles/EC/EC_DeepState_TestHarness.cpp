// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// EC_DeepState_TestHarness_generation.cpp and EC_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List EC(arma::mat Udata, arma::mat Wdata, double NumbBoot, double Grouping, double finalComparison, double ExpMinSampleSize, double TrainingDataFraction);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  std::ofstream Udata_stream;
  arma::mat Udata  = RcppDeepState_mat();
  Udata_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/pacotest/inst/testfiles/EC/inputs/Udata");
  Udata_stream << Udata;
  std::cout << "Udata values: "<< Udata << std::endl;
  Udata_stream.close();
  std::ofstream Wdata_stream;
  arma::mat Wdata  = RcppDeepState_mat();
  Wdata_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/pacotest/inst/testfiles/EC/inputs/Wdata");
  Wdata_stream << Wdata;
  std::cout << "Wdata values: "<< Wdata << std::endl;
  Wdata_stream.close();
  NumericVector NumbBoot(1);
  NumbBoot[0]  = RcppDeepState_double();
  qs::c_qsave(NumbBoot,"/home/akhila/fuzzer_packages/fuzzedpackages/pacotest/inst/testfiles/EC/inputs/NumbBoot.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "NumbBoot values: "<< NumbBoot << std::endl;
  NumericVector Grouping(1);
  Grouping[0]  = RcppDeepState_double();
  qs::c_qsave(Grouping,"/home/akhila/fuzzer_packages/fuzzedpackages/pacotest/inst/testfiles/EC/inputs/Grouping.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Grouping values: "<< Grouping << std::endl;
  NumericVector finalComparison(1);
  finalComparison[0]  = RcppDeepState_double();
  qs::c_qsave(finalComparison,"/home/akhila/fuzzer_packages/fuzzedpackages/pacotest/inst/testfiles/EC/inputs/finalComparison.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "finalComparison values: "<< finalComparison << std::endl;
  NumericVector ExpMinSampleSize(1);
  ExpMinSampleSize[0]  = RcppDeepState_double();
  qs::c_qsave(ExpMinSampleSize,"/home/akhila/fuzzer_packages/fuzzedpackages/pacotest/inst/testfiles/EC/inputs/ExpMinSampleSize.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ExpMinSampleSize values: "<< ExpMinSampleSize << std::endl;
  NumericVector TrainingDataFraction(1);
  TrainingDataFraction[0]  = RcppDeepState_double();
  qs::c_qsave(TrainingDataFraction,"/home/akhila/fuzzer_packages/fuzzedpackages/pacotest/inst/testfiles/EC/inputs/TrainingDataFraction.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "TrainingDataFraction values: "<< TrainingDataFraction << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    EC(Udata,Wdata,NumbBoot[0],Grouping[0],finalComparison[0],ExpMinSampleSize[0],TrainingDataFraction[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
