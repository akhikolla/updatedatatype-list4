// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// unNormedMargLogLikeCpp_DeepState_TestHarness_generation.cpp and unNormedMargLogLikeCpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double unNormedMargLogLikeCpp(double phi, double shift, int z11, int z12, int z21, int z22, int m011, int m012, int m021, int m022, int y01, int y02, int N1, int N2, int N01, int N02);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector phi(1);
  phi[0]  = RcppDeepState_double();
  std::string phi_t = "/home/akhila/fuzzer_packages/fuzzedpackages/poisDoubleSamp/inst/testfiles/unNormedMargLogLikeCpp/libFuzzer_unNormedMargLogLikeCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_phi.qs";
  qs::c_qsave(phi,phi_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "phi values: "<< phi << std::endl;
  NumericVector shift(1);
  shift[0]  = RcppDeepState_double();
  std::string shift_t = "/home/akhila/fuzzer_packages/fuzzedpackages/poisDoubleSamp/inst/testfiles/unNormedMargLogLikeCpp/libFuzzer_unNormedMargLogLikeCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_shift.qs";
  qs::c_qsave(shift,shift_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "shift values: "<< shift << std::endl;
  IntegerVector z11(1);
  z11[0]  = RcppDeepState_int();
  std::string z11_t = "/home/akhila/fuzzer_packages/fuzzedpackages/poisDoubleSamp/inst/testfiles/unNormedMargLogLikeCpp/libFuzzer_unNormedMargLogLikeCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_z11.qs";
  qs::c_qsave(z11,z11_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "z11 values: "<< z11 << std::endl;
  IntegerVector z12(1);
  z12[0]  = RcppDeepState_int();
  std::string z12_t = "/home/akhila/fuzzer_packages/fuzzedpackages/poisDoubleSamp/inst/testfiles/unNormedMargLogLikeCpp/libFuzzer_unNormedMargLogLikeCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_z12.qs";
  qs::c_qsave(z12,z12_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "z12 values: "<< z12 << std::endl;
  IntegerVector z21(1);
  z21[0]  = RcppDeepState_int();
  std::string z21_t = "/home/akhila/fuzzer_packages/fuzzedpackages/poisDoubleSamp/inst/testfiles/unNormedMargLogLikeCpp/libFuzzer_unNormedMargLogLikeCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_z21.qs";
  qs::c_qsave(z21,z21_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "z21 values: "<< z21 << std::endl;
  IntegerVector z22(1);
  z22[0]  = RcppDeepState_int();
  std::string z22_t = "/home/akhila/fuzzer_packages/fuzzedpackages/poisDoubleSamp/inst/testfiles/unNormedMargLogLikeCpp/libFuzzer_unNormedMargLogLikeCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_z22.qs";
  qs::c_qsave(z22,z22_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "z22 values: "<< z22 << std::endl;
  IntegerVector m011(1);
  m011[0]  = RcppDeepState_int();
  std::string m011_t = "/home/akhila/fuzzer_packages/fuzzedpackages/poisDoubleSamp/inst/testfiles/unNormedMargLogLikeCpp/libFuzzer_unNormedMargLogLikeCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_m011.qs";
  qs::c_qsave(m011,m011_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "m011 values: "<< m011 << std::endl;
  IntegerVector m012(1);
  m012[0]  = RcppDeepState_int();
  std::string m012_t = "/home/akhila/fuzzer_packages/fuzzedpackages/poisDoubleSamp/inst/testfiles/unNormedMargLogLikeCpp/libFuzzer_unNormedMargLogLikeCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_m012.qs";
  qs::c_qsave(m012,m012_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "m012 values: "<< m012 << std::endl;
  IntegerVector m021(1);
  m021[0]  = RcppDeepState_int();
  std::string m021_t = "/home/akhila/fuzzer_packages/fuzzedpackages/poisDoubleSamp/inst/testfiles/unNormedMargLogLikeCpp/libFuzzer_unNormedMargLogLikeCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_m021.qs";
  qs::c_qsave(m021,m021_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "m021 values: "<< m021 << std::endl;
  IntegerVector m022(1);
  m022[0]  = RcppDeepState_int();
  std::string m022_t = "/home/akhila/fuzzer_packages/fuzzedpackages/poisDoubleSamp/inst/testfiles/unNormedMargLogLikeCpp/libFuzzer_unNormedMargLogLikeCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_m022.qs";
  qs::c_qsave(m022,m022_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "m022 values: "<< m022 << std::endl;
  IntegerVector y01(1);
  y01[0]  = RcppDeepState_int();
  std::string y01_t = "/home/akhila/fuzzer_packages/fuzzedpackages/poisDoubleSamp/inst/testfiles/unNormedMargLogLikeCpp/libFuzzer_unNormedMargLogLikeCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_y01.qs";
  qs::c_qsave(y01,y01_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y01 values: "<< y01 << std::endl;
  IntegerVector y02(1);
  y02[0]  = RcppDeepState_int();
  std::string y02_t = "/home/akhila/fuzzer_packages/fuzzedpackages/poisDoubleSamp/inst/testfiles/unNormedMargLogLikeCpp/libFuzzer_unNormedMargLogLikeCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_y02.qs";
  qs::c_qsave(y02,y02_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y02 values: "<< y02 << std::endl;
  IntegerVector N1(1);
  N1[0]  = RcppDeepState_int();
  std::string N1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/poisDoubleSamp/inst/testfiles/unNormedMargLogLikeCpp/libFuzzer_unNormedMargLogLikeCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_N1.qs";
  qs::c_qsave(N1,N1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "N1 values: "<< N1 << std::endl;
  IntegerVector N2(1);
  N2[0]  = RcppDeepState_int();
  std::string N2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/poisDoubleSamp/inst/testfiles/unNormedMargLogLikeCpp/libFuzzer_unNormedMargLogLikeCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_N2.qs";
  qs::c_qsave(N2,N2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "N2 values: "<< N2 << std::endl;
  IntegerVector N01(1);
  N01[0]  = RcppDeepState_int();
  std::string N01_t = "/home/akhila/fuzzer_packages/fuzzedpackages/poisDoubleSamp/inst/testfiles/unNormedMargLogLikeCpp/libFuzzer_unNormedMargLogLikeCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_N01.qs";
  qs::c_qsave(N01,N01_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "N01 values: "<< N01 << std::endl;
  IntegerVector N02(1);
  N02[0]  = RcppDeepState_int();
  std::string N02_t = "/home/akhila/fuzzer_packages/fuzzedpackages/poisDoubleSamp/inst/testfiles/unNormedMargLogLikeCpp/libFuzzer_unNormedMargLogLikeCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_N02.qs";
  qs::c_qsave(N02,N02_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "N02 values: "<< N02 << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    unNormedMargLogLikeCpp(phi[0],shift[0],z11[0],z12[0],z21[0],z22[0],m011[0],m012[0],m021[0],m022[0],y01[0],y02[0],N1[0],N2[0],N01[0],N02[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
