// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// euc_distances_DeepState_TestHarness_generation.cpp and euc_distances_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix euc_distances(const NumericVector& x1, const NumericVector& y1, const NumericVector& x2, const NumericVector& y2);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector x1  = RcppDeepState_NumericVector();
  std::string x1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/palm/inst/testfiles/euc_distances/libFuzzer_euc_distances/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_x1.qs";
  qs::c_qsave(x1,x1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x1 values: "<< x1 << std::endl;
  NumericVector y1  = RcppDeepState_NumericVector();
  std::string y1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/palm/inst/testfiles/euc_distances/libFuzzer_euc_distances/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_y1.qs";
  qs::c_qsave(y1,y1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y1 values: "<< y1 << std::endl;
  NumericVector x2  = RcppDeepState_NumericVector();
  std::string x2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/palm/inst/testfiles/euc_distances/libFuzzer_euc_distances/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_x2.qs";
  qs::c_qsave(x2,x2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x2 values: "<< x2 << std::endl;
  NumericVector y2  = RcppDeepState_NumericVector();
  std::string y2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/palm/inst/testfiles/euc_distances/libFuzzer_euc_distances/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_y2.qs";
  qs::c_qsave(y2,y2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y2 values: "<< y2 << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    euc_distances(x1,y1,x2,y2);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
