// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// PenScore_DeepState_TestHarness_generation.cpp and PenScore_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

arma::vec PenScore(Rcpp::NumericVector beta, Rcpp::NumericVector score, Rcpp::NumericMatrix Emat, int n);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector beta  = RcppDeepState_NumericVector();
  std::string beta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/pgee.mixed/inst/testfiles/PenScore/libFuzzer_PenScore/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_beta.qs";
  qs::c_qsave(beta,beta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "beta values: "<< beta << std::endl;
  NumericVector score  = RcppDeepState_NumericVector();
  std::string score_t = "/home/akhila/fuzzer_packages/fuzzedpackages/pgee.mixed/inst/testfiles/PenScore/libFuzzer_PenScore/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_score.qs";
  qs::c_qsave(score,score_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "score values: "<< score << std::endl;
  NumericMatrix Emat  = RcppDeepState_NumericMatrix();
  std::string Emat_t = "/home/akhila/fuzzer_packages/fuzzedpackages/pgee.mixed/inst/testfiles/PenScore/libFuzzer_PenScore/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Emat.qs";
  qs::c_qsave(Emat,Emat_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Emat values: "<< Emat << std::endl;
  IntegerVector n(1);
  n[0]  = RcppDeepState_int();
  std::string n_t = "/home/akhila/fuzzer_packages/fuzzedpackages/pgee.mixed/inst/testfiles/PenScore/libFuzzer_PenScore/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_n.qs";
  qs::c_qsave(n,n_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n values: "<< n << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    PenScore(beta,score,Emat,n[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
