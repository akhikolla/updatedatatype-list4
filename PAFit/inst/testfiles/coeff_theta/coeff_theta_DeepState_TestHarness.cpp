// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// coeff_theta_DeepState_TestHarness_generation.cpp and coeff_theta_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector coeff_theta(const NumericMatrix& degree, const NumericVector& f, const NumericVector& normalized_const, const NumericVector& m_t, const int length_theta);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix degree  = RcppDeepState_NumericMatrix();
  qs::c_qsave(degree,"/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/coeff_theta/inputs/degree.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "degree values: "<< degree << std::endl;
  NumericVector f  = RcppDeepState_NumericVector();
  qs::c_qsave(f,"/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/coeff_theta/inputs/f.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "f values: "<< f << std::endl;
  NumericVector normalized_  = RcppDeepState_NumericVector();
  qs::c_qsave(normalized_const,"/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/coeff_theta/inputs/normalized_const.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "normalized_const values: "<< normalized_const << std::endl;
  NumericVector m_t  = RcppDeepState_NumericVector();
  qs::c_qsave(m_t,"/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/coeff_theta/inputs/m_t.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "m_t values: "<< m_t << std::endl;
  IntegerVector length_theta(1);
  length_theta[0]  = RcppDeepState_int();
  qs::c_qsave(length_theta,"/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/coeff_theta/inputs/length_theta.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "length_theta values: "<< length_theta << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    coeff_theta(degree,f,normalized_const,m_t,length_theta[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
