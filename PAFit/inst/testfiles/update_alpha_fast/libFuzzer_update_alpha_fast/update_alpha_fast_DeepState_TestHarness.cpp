// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// update_alpha_fast_DeepState_TestHarness_generation.cpp and update_alpha_fast_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double update_alpha_fast(const NumericVector& non_zero_theta, const NumericVector& norm, const NumericVector& f, const double& PA_offset, const NumericVector& theta, const NumericMatrix& degree, const NumericVector& m_t, const NumericVector& Sum_m_k, const NumericMatrix& offset_tk, const double& offset, const double alpha_old);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector non_zero_theta  = RcppDeepState_NumericVector();
  std::string non_zero_theta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/update_alpha_fast/libFuzzer_update_alpha_fast/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_non_zero_theta.qs";
  qs::c_qsave(non_zero_theta,non_zero_theta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "non_zero_theta values: "<< non_zero_theta << std::endl;
  NumericVector norm  = RcppDeepState_NumericVector();
  std::string norm_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/update_alpha_fast/libFuzzer_update_alpha_fast/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_norm.qs";
  qs::c_qsave(norm,norm_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "norm values: "<< norm << std::endl;
  NumericVector f  = RcppDeepState_NumericVector();
  std::string f_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/update_alpha_fast/libFuzzer_update_alpha_fast/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_f.qs";
  qs::c_qsave(f,f_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "f values: "<< f << std::endl;
  NumericVector PA_offset(1);
  PA_offset[0]  = RcppDeepState_double();
  std::string PA_offset_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/update_alpha_fast/libFuzzer_update_alpha_fast/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_PA_offset.qs";
  qs::c_qsave(PA_offset,PA_offset_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "PA_offset values: "<< PA_offset << std::endl;
  NumericVector theta  = RcppDeepState_NumericVector();
  std::string theta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/update_alpha_fast/libFuzzer_update_alpha_fast/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_theta.qs";
  qs::c_qsave(theta,theta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "theta values: "<< theta << std::endl;
  NumericMatrix degree  = RcppDeepState_NumericMatrix();
  std::string degree_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/update_alpha_fast/libFuzzer_update_alpha_fast/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_degree.qs";
  qs::c_qsave(degree,degree_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "degree values: "<< degree << std::endl;
  NumericVector m_t  = RcppDeepState_NumericVector();
  std::string m_t_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/update_alpha_fast/libFuzzer_update_alpha_fast/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_m_t.qs";
  qs::c_qsave(m_t,m_t_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "m_t values: "<< m_t << std::endl;
  NumericVector Sum_m_k  = RcppDeepState_NumericVector();
  std::string Sum_m_k_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/update_alpha_fast/libFuzzer_update_alpha_fast/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Sum_m_k.qs";
  qs::c_qsave(Sum_m_k,Sum_m_k_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Sum_m_k values: "<< Sum_m_k << std::endl;
  NumericMatrix offset_tk  = RcppDeepState_NumericMatrix();
  std::string offset_tk_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/update_alpha_fast/libFuzzer_update_alpha_fast/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_offset_tk.qs";
  std::string offset_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/update_alpha_fast/libFuzzer_update_alpha_fast/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_offset.qs";
  qs::c_qsave(offset_tk,offset_tk_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "offset_tk values: "<< offset_tk << std::endl;
  NumericVector offset(1);
  offset[0]  = RcppDeepState_double();
  std::string offset_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/update_alpha_fast/libFuzzer_update_alpha_fast/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_offset.qs";
  qs::c_qsave(offset,offset_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "offset values: "<< offset << std::endl;
  NumericVector alpha_old(1);
  alpha_old[0]  = RcppDeepState_double();
  std::string alpha_old_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/update_alpha_fast/libFuzzer_update_alpha_fast/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_alpha_old.qs";
  qs::c_qsave(alpha_old,alpha_old_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha_old values: "<< alpha_old << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    update_alpha_fast(non_zero_theta,norm,f,PA_offset[0],theta,degree,m_t,Sum_m_k,offset_tk,offset[0],alpha_old[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
