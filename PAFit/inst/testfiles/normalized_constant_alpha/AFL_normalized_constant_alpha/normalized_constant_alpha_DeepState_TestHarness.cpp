// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// normalized_constant_alpha_DeepState_TestHarness_generation.cpp and normalized_constant_alpha_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

int normalized_constant_alpha(NumericVector& norm, const double& alpha, const double& PA_offset, const NumericMatrix& degree, const NumericVector& theta, const NumericVector& f, const NumericMatrix& offset_tk, const double& offset);

TEST(,){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector norm  = RcppDeepState_NumericVector();
  std::string norm_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/normalized_constant_alpha/AFL_normalized_constant_alpha/afl_inputs/" + std::to_string(t) + "_norm.qs";
  qs::c_qsave(norm,norm_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "norm values: "<< norm << std::endl;
  NumericVector alpha(1);
  alpha[0]  = RcppDeepState_double();
  std::string alpha_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/normalized_constant_alpha/AFL_normalized_constant_alpha/afl_inputs/" + std::to_string(t) + "_alpha.qs";
  qs::c_qsave(alpha,alpha_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha values: "<< alpha << std::endl;
  NumericVector PA_offset(1);
  PA_offset[0]  = RcppDeepState_double();
  std::string PA_offset_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/normalized_constant_alpha/AFL_normalized_constant_alpha/afl_inputs/" + std::to_string(t) + "_PA_offset.qs";
  qs::c_qsave(PA_offset,PA_offset_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "PA_offset values: "<< PA_offset << std::endl;
  NumericMatrix degree  = RcppDeepState_NumericMatrix();
  std::string degree_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/normalized_constant_alpha/AFL_normalized_constant_alpha/afl_inputs/" + std::to_string(t) + "_degree.qs";
  qs::c_qsave(degree,degree_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "degree values: "<< degree << std::endl;
  NumericVector theta  = RcppDeepState_NumericVector();
  std::string theta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/normalized_constant_alpha/AFL_normalized_constant_alpha/afl_inputs/" + std::to_string(t) + "_theta.qs";
  qs::c_qsave(theta,theta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "theta values: "<< theta << std::endl;
  NumericVector f  = RcppDeepState_NumericVector();
  std::string f_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/normalized_constant_alpha/AFL_normalized_constant_alpha/afl_inputs/" + std::to_string(t) + "_f.qs";
  qs::c_qsave(f,f_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "f values: "<< f << std::endl;
  NumericMatrix offset_tk  = RcppDeepState_NumericMatrix();
  std::string offset_tk_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/normalized_constant_alpha/AFL_normalized_constant_alpha/afl_inputs/" + std::to_string(t) + "_offset_tk.qs";
  std::string offset_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/normalized_constant_alpha/AFL_normalized_constant_alpha/afl_inputs/" + std::to_string(t) + "_offset.qs";
  qs::c_qsave(offset_tk,offset_tk_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "offset_tk values: "<< offset_tk << std::endl;
  NumericVector offset(1);
  offset[0]  = RcppDeepState_double();
  std::string offset_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PAFit/inst/testfiles/normalized_constant_alpha/AFL_normalized_constant_alpha/afl_inputs/" + std::to_string(t) + "_offset.qs";
  qs::c_qsave(offset,offset_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "offset values: "<< offset << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    normalized_constant_alpha(norm,alpha[0],PA_offset[0],degree,theta,f,offset_tk,offset[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
