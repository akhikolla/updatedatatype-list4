// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// gibbs_DeepState_TestHarness_generation.cpp and gibbs_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List gibbs(Rcpp::IntegerVector U0, Rcpp::NumericVector ftgrid, Rcpp::NumericVector time, Rcpp::IntegerVector status, double a_rates, double b_rates, int cohesion, double a_beta, double b_beta, int npost, int nburnin, int nlag);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  IntegerVector U0  = RcppDeepState_IntegerVector();
  qs::c_qsave(U0,"/home/akhila/fuzzer_packages/fuzzedpackages/peppm/inst/testfiles/gibbs/inputs/U0.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "U0 values: "<< U0 << std::endl;
  NumericVector ftgrid  = RcppDeepState_NumericVector();
  qs::c_qsave(ftgrid,"/home/akhila/fuzzer_packages/fuzzedpackages/peppm/inst/testfiles/gibbs/inputs/ftgrid.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ftgrid values: "<< ftgrid << std::endl;
  NumericVector time  = RcppDeepState_NumericVector();
  qs::c_qsave(time,"/home/akhila/fuzzer_packages/fuzzedpackages/peppm/inst/testfiles/gibbs/inputs/time.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "time values: "<< time << std::endl;
  IntegerVector status  = RcppDeepState_IntegerVector();
  qs::c_qsave(status,"/home/akhila/fuzzer_packages/fuzzedpackages/peppm/inst/testfiles/gibbs/inputs/status.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "status values: "<< status << std::endl;
  NumericVector a_rates(1);
  a_rates[0]  = RcppDeepState_double();
  qs::c_qsave(a_rates,"/home/akhila/fuzzer_packages/fuzzedpackages/peppm/inst/testfiles/gibbs/inputs/a_rates.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "a_rates values: "<< a_rates << std::endl;
  NumericVector b_rates(1);
  b_rates[0]  = RcppDeepState_double();
  qs::c_qsave(b_rates,"/home/akhila/fuzzer_packages/fuzzedpackages/peppm/inst/testfiles/gibbs/inputs/b_rates.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "b_rates values: "<< b_rates << std::endl;
  IntegerVector cohesion(1);
  cohesion[0]  = RcppDeepState_int();
  qs::c_qsave(cohesion,"/home/akhila/fuzzer_packages/fuzzedpackages/peppm/inst/testfiles/gibbs/inputs/cohesion.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "cohesion values: "<< cohesion << std::endl;
  NumericVector a_beta(1);
  a_beta[0]  = RcppDeepState_double();
  qs::c_qsave(a_beta,"/home/akhila/fuzzer_packages/fuzzedpackages/peppm/inst/testfiles/gibbs/inputs/a_beta.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "a_beta values: "<< a_beta << std::endl;
  NumericVector b_beta(1);
  b_beta[0]  = RcppDeepState_double();
  qs::c_qsave(b_beta,"/home/akhila/fuzzer_packages/fuzzedpackages/peppm/inst/testfiles/gibbs/inputs/b_beta.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "b_beta values: "<< b_beta << std::endl;
  IntegerVector npost(1);
  npost[0]  = RcppDeepState_int();
  qs::c_qsave(npost,"/home/akhila/fuzzer_packages/fuzzedpackages/peppm/inst/testfiles/gibbs/inputs/npost.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "npost values: "<< npost << std::endl;
  IntegerVector nburnin(1);
  nburnin[0]  = RcppDeepState_int();
  qs::c_qsave(nburnin,"/home/akhila/fuzzer_packages/fuzzedpackages/peppm/inst/testfiles/gibbs/inputs/nburnin.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nburnin values: "<< nburnin << std::endl;
  IntegerVector nlag(1);
  nlag[0]  = RcppDeepState_int();
  qs::c_qsave(nlag,"/home/akhila/fuzzer_packages/fuzzedpackages/peppm/inst/testfiles/gibbs/inputs/nlag.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nlag values: "<< nlag << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    gibbs(U0,ftgrid,time,status,a_rates[0],b_rates[0],cohesion[0],a_beta[0],b_beta[0],npost[0],nburnin[0],nlag[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
