// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// ridgePgen_DeepState_TestHarness_generation.cpp and ridgePgen_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

arma::mat ridgePgen(const arma::mat& S, const arma::mat& lambda, const arma::mat& target, const int& nInit, const double& minSuccDiff);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  std::ofstream S_stream;
  arma::mat S  = RcppDeepState_mat();
  S_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/porridge/inst/testfiles/ridgePgen/inputs/S");
  S_stream << S;
  std::cout << "S values: "<< S << std::endl;
  S_stream.close();
  std::ofstream lambda_stream;
  arma::mat lambda  = RcppDeepState_mat();
  lambda_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/porridge/inst/testfiles/ridgePgen/inputs/lambda");
  lambda_stream << lambda;
  std::cout << "lambda values: "<< lambda << std::endl;
  lambda_stream.close();
  std::ofstream target_stream;
  arma::mat target  = RcppDeepState_mat();
  target_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/porridge/inst/testfiles/ridgePgen/inputs/target");
  target_stream << target;
  std::cout << "target values: "<< target << std::endl;
  target_stream.close();
  IntegerVector nInit(1);
  nInit[0]  = RcppDeepState_int();
  qs::c_qsave(nInit,"/home/akhila/fuzzer_packages/fuzzedpackages/porridge/inst/testfiles/ridgePgen/inputs/nInit.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nInit values: "<< nInit << std::endl;
  NumericVector minSuccDiff(1);
  minSuccDiff[0]  = RcppDeepState_double();
  qs::c_qsave(minSuccDiff,"/home/akhila/fuzzer_packages/fuzzedpackages/porridge/inst/testfiles/ridgePgen/inputs/minSuccDiff.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "minSuccDiff values: "<< minSuccDiff << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    ridgePgen(S,lambda,target,nInit[0],minSuccDiff[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
