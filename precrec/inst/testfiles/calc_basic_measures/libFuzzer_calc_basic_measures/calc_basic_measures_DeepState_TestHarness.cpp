// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// calc_basic_measures_DeepState_TestHarness_generation.cpp and calc_basic_measures_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List calc_basic_measures(int np, int nn, const Rcpp::NumericVector& tps, const Rcpp::NumericVector& fps, const Rcpp::NumericVector& tns, const Rcpp::NumericVector& fns);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector np(1);
  np[0]  = RcppDeepState_int();
  std::string np_t = "/home/akhila/fuzzer_packages/fuzzedpackages/precrec/inst/testfiles/calc_basic_measures/libFuzzer_calc_basic_measures/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_np.qs";
  qs::c_qsave(np,np_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "np values: "<< np << std::endl;
  IntegerVector nn(1);
  nn[0]  = RcppDeepState_int();
  std::string nn_t = "/home/akhila/fuzzer_packages/fuzzedpackages/precrec/inst/testfiles/calc_basic_measures/libFuzzer_calc_basic_measures/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nn.qs";
  qs::c_qsave(nn,nn_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nn values: "<< nn << std::endl;
  NumericVector tps  = RcppDeepState_NumericVector();
  std::string tps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/precrec/inst/testfiles/calc_basic_measures/libFuzzer_calc_basic_measures/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_tps.qs";
  qs::c_qsave(tps,tps_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tps values: "<< tps << std::endl;
  NumericVector fps  = RcppDeepState_NumericVector();
  std::string fps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/precrec/inst/testfiles/calc_basic_measures/libFuzzer_calc_basic_measures/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_fps.qs";
  qs::c_qsave(fps,fps_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "fps values: "<< fps << std::endl;
  NumericVector tns  = RcppDeepState_NumericVector();
  std::string tns_t = "/home/akhila/fuzzer_packages/fuzzedpackages/precrec/inst/testfiles/calc_basic_measures/libFuzzer_calc_basic_measures/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_tns.qs";
  qs::c_qsave(tns,tns_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tns values: "<< tns << std::endl;
  NumericVector fns  = RcppDeepState_NumericVector();
  std::string fns_t = "/home/akhila/fuzzer_packages/fuzzedpackages/precrec/inst/testfiles/calc_basic_measures/libFuzzer_calc_basic_measures/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_fns.qs";
  qs::c_qsave(fns,fns_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "fns values: "<< fns << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    calc_basic_measures(np[0],nn[0],tps,fps,tns,fns);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
