// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// calc_basic_measures_DeepState_TestHarness_generation.cpp and calc_basic_measures_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List calc_basic_measures(int np, int nn, const Rcpp::NumericVector& tps, const Rcpp::NumericVector& fps, const Rcpp::NumericVector& tns, const Rcpp::NumericVector& fns);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  IntegerVector np(1);
  np[0]  = RcppDeepState_int();
  qs::c_qsave(np,"/home/akhila/fuzzer_packages/fuzzedpackages/precrec/inst/testfiles/calc_basic_measures/inputs/np.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "np values: "<< np << std::endl;
  IntegerVector nn(1);
  nn[0]  = RcppDeepState_int();
  qs::c_qsave(nn,"/home/akhila/fuzzer_packages/fuzzedpackages/precrec/inst/testfiles/calc_basic_measures/inputs/nn.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nn values: "<< nn << std::endl;
  NumericVector tps  = RcppDeepState_NumericVector();
  qs::c_qsave(tps,"/home/akhila/fuzzer_packages/fuzzedpackages/precrec/inst/testfiles/calc_basic_measures/inputs/tps.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tps values: "<< tps << std::endl;
  NumericVector fps  = RcppDeepState_NumericVector();
  qs::c_qsave(fps,"/home/akhila/fuzzer_packages/fuzzedpackages/precrec/inst/testfiles/calc_basic_measures/inputs/fps.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "fps values: "<< fps << std::endl;
  NumericVector tns  = RcppDeepState_NumericVector();
  qs::c_qsave(tns,"/home/akhila/fuzzer_packages/fuzzedpackages/precrec/inst/testfiles/calc_basic_measures/inputs/tns.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tns values: "<< tns << std::endl;
  NumericVector fns  = RcppDeepState_NumericVector();
  qs::c_qsave(fns,"/home/akhila/fuzzer_packages/fuzzedpackages/precrec/inst/testfiles/calc_basic_measures/inputs/fns.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "fns values: "<< fns << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    calc_basic_measures(np[0],nn[0],tps,fps,tns,fns);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
