// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// create_confusion_matrices_DeepState_TestHarness_generation.cpp and create_confusion_matrices_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List create_confusion_matrices(const Rcpp::IntegerVector& olabs, const Rcpp::NumericVector& ranks, const Rcpp::IntegerVector& rank_idx);

TEST(,){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector olabs  = RcppDeepState_IntegerVector();
  std::string olabs_t = "/home/akhila/fuzzer_packages/fuzzedpackages/precrec/inst/testfiles/create_confusion_matrices/AFL_create_confusion_matrices/afl_inputs/" + std::to_string(t) + "_olabs.qs";
  qs::c_qsave(olabs,olabs_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "olabs values: "<< olabs << std::endl;
  NumericVector ranks  = RcppDeepState_NumericVector();
  std::string ranks_t = "/home/akhila/fuzzer_packages/fuzzedpackages/precrec/inst/testfiles/create_confusion_matrices/AFL_create_confusion_matrices/afl_inputs/" + std::to_string(t) + "_ranks.qs";
  qs::c_qsave(ranks,ranks_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ranks values: "<< ranks << std::endl;
  IntegerVector rank_idx  = RcppDeepState_IntegerVector();
  std::string rank_idx_t = "/home/akhila/fuzzer_packages/fuzzedpackages/precrec/inst/testfiles/create_confusion_matrices/AFL_create_confusion_matrices/afl_inputs/" + std::to_string(t) + "_rank_idx.qs";
  qs::c_qsave(rank_idx,rank_idx_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rank_idx values: "<< rank_idx << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    create_confusion_matrices(olabs,ranks,rank_idx);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
