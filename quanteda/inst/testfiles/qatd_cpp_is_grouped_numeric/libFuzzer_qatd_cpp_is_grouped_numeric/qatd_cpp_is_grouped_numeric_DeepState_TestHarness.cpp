// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// qatd_cpp_is_grouped_numeric_DeepState_TestHarness_generation.cpp and qatd_cpp_is_grouped_numeric_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

bool qatd_cpp_is_grouped_numeric(NumericVector values_, IntegerVector groups_);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector values_  = RcppDeepState_NumericVector();
  std::string values__t = "/home/akhila/fuzzer_packages/fuzzedpackages/quanteda/inst/testfiles/qatd_cpp_is_grouped_numeric/libFuzzer_qatd_cpp_is_grouped_numeric/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_values_.qs";
  qs::c_qsave(values_,values__t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "values_ values: "<< values_ << std::endl;
  IntegerVector groups_  = RcppDeepState_IntegerVector();
  std::string groups__t = "/home/akhila/fuzzer_packages/fuzzedpackages/quanteda/inst/testfiles/qatd_cpp_is_grouped_numeric/libFuzzer_qatd_cpp_is_grouped_numeric/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_groups_.qs";
  qs::c_qsave(groups_,groups__t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "groups_ values: "<< groups_ << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    qatd_cpp_is_grouped_numeric(values_,groups_);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
