// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// loglik_par_c_DeepState_TestHarness_generation.cpp and loglik_par_c_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double loglik_par_c(NumericVector Y, double rho, double sigma_M, double sigma_R, double M0, double R0);

TEST(,){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector Y  = RcppDeepState_NumericVector();
  std::string Y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/partialCI/inst/testfiles/loglik_par_c/AFL_loglik_par_c/afl_inputs/" + std::to_string(t) + "_Y.qs";
  qs::c_qsave(Y,Y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Y values: "<< Y << std::endl;
  NumericVector rho(1);
  rho[0]  = RcppDeepState_double();
  std::string rho_t = "/home/akhila/fuzzer_packages/fuzzedpackages/partialCI/inst/testfiles/loglik_par_c/AFL_loglik_par_c/afl_inputs/" + std::to_string(t) + "_rho.qs";
  qs::c_qsave(rho,rho_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rho values: "<< rho << std::endl;
  NumericVector sigma_M(1);
  sigma_M[0]  = RcppDeepState_double();
  std::string sigma_M_t = "/home/akhila/fuzzer_packages/fuzzedpackages/partialCI/inst/testfiles/loglik_par_c/AFL_loglik_par_c/afl_inputs/" + std::to_string(t) + "_sigma_M.qs";
  qs::c_qsave(sigma_M,sigma_M_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sigma_M values: "<< sigma_M << std::endl;
  NumericVector sigma_R(1);
  sigma_R[0]  = RcppDeepState_double();
  std::string sigma_R_t = "/home/akhila/fuzzer_packages/fuzzedpackages/partialCI/inst/testfiles/loglik_par_c/AFL_loglik_par_c/afl_inputs/" + std::to_string(t) + "_sigma_R.qs";
  qs::c_qsave(sigma_R,sigma_R_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sigma_R values: "<< sigma_R << std::endl;
  NumericVector M0(1);
  M0[0]  = RcppDeepState_double();
  std::string M0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/partialCI/inst/testfiles/loglik_par_c/AFL_loglik_par_c/afl_inputs/" + std::to_string(t) + "_M0.qs";
  qs::c_qsave(M0,M0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "M0 values: "<< M0 << std::endl;
  NumericVector R0(1);
  R0[0]  = RcppDeepState_double();
  std::string R0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/partialCI/inst/testfiles/loglik_par_c/AFL_loglik_par_c/afl_inputs/" + std::to_string(t) + "_R0.qs";
  qs::c_qsave(R0,R0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "R0 values: "<< R0 << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    loglik_par_c(Y,rho[0],sigma_M[0],sigma_R[0],M0[0],R0[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
