// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// estimate_par_c_DeepState_TestHarness_generation.cpp and estimate_par_c_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector estimate_par_c(NumericVector X, double rho_max);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector X  = RcppDeepState_NumericVector();
  std::string X_t = "/home/akhila/fuzzer_packages/fuzzedpackages/partialCI/inst/testfiles/estimate_par_c/libFuzzer_estimate_par_c/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_X.qs";
  qs::c_qsave(X,X_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "X values: "<< X << std::endl;
  NumericVector rho_max(1);
  rho_max[0]  = RcppDeepState_double();
  std::string rho_max_t = "/home/akhila/fuzzer_packages/fuzzedpackages/partialCI/inst/testfiles/estimate_par_c/libFuzzer_estimate_par_c/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_rho_max.qs";
  qs::c_qsave(rho_max,rho_max_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rho_max values: "<< rho_max << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    estimate_par_c(X,rho_max[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
