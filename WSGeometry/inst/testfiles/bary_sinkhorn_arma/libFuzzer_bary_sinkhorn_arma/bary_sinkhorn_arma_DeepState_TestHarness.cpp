// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// bary_sinkhorn_arma_DeepState_TestHarness_generation.cpp and bary_sinkhorn_arma_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List bary_sinkhorn_arma(arma::mat weights, arma::mat frechet, int maxIter, double lambda, arma::mat C, double thresh, int threads);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  std::ofstream weights_stream;
  arma::mat weights  = RcppDeepState_mat();
  weights_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/WSGeometry/inst/testfiles/bary_sinkhorn_arma/inputs/weights");
  weights_stream << weights;
  std::cout << "weights values: "<< weights << std::endl;
  weights_stream.close();
  std::ofstream frechet_stream;
  arma::mat frechet  = RcppDeepState_mat();
  frechet_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/WSGeometry/inst/testfiles/bary_sinkhorn_arma/inputs/frechet");
  frechet_stream << frechet;
  std::cout << "frechet values: "<< frechet << std::endl;
  frechet_stream.close();
  IntegerVector maxIter(1);
  maxIter[0]  = RcppDeepState_int();
  std::string maxIter_t = "/home/akhila/fuzzer_packages/fuzzedpackages/WSGeometry/inst/testfiles/bary_sinkhorn_arma/libFuzzer_bary_sinkhorn_arma/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_maxIter.qs";
  qs::c_qsave(maxIter,maxIter_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxIter values: "<< maxIter << std::endl;
  NumericVector lambda(1);
  lambda[0]  = RcppDeepState_double();
  std::string lambda_t = "/home/akhila/fuzzer_packages/fuzzedpackages/WSGeometry/inst/testfiles/bary_sinkhorn_arma/libFuzzer_bary_sinkhorn_arma/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lambda.qs";
  qs::c_qsave(lambda,lambda_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda values: "<< lambda << std::endl;
  std::ofstream C_stream;
  arma::mat C  = RcppDeepState_mat();
  C_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/WSGeometry/inst/testfiles/bary_sinkhorn_arma/inputs/C");
  C_stream << C;
  std::cout << "C values: "<< C << std::endl;
  C_stream.close();
  NumericVector thresh(1);
  thresh[0]  = RcppDeepState_double();
  std::string thresh_t = "/home/akhila/fuzzer_packages/fuzzedpackages/WSGeometry/inst/testfiles/bary_sinkhorn_arma/libFuzzer_bary_sinkhorn_arma/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_thresh.qs";
  qs::c_qsave(thresh,thresh_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "thresh values: "<< thresh << std::endl;
  IntegerVector threads(1);
  threads[0]  = RcppDeepState_int();
  std::string threads_t = "/home/akhila/fuzzer_packages/fuzzedpackages/WSGeometry/inst/testfiles/bary_sinkhorn_arma/libFuzzer_bary_sinkhorn_arma/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_threads.qs";
  qs::c_qsave(threads,threads_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "threads values: "<< threads << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    bary_sinkhorn_arma(weights,frechet,maxIter[0],lambda[0],C,thresh[0],threads[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
