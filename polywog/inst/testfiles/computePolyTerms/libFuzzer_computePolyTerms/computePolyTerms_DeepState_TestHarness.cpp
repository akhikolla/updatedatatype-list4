// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// computePolyTerms_DeepState_TestHarness_generation.cpp and computePolyTerms_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List computePolyTerms(int degree, int k_expand, int k_lin);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector degree(1);
  degree[0]  = RcppDeepState_int();
  std::string degree_t = "/home/akhila/fuzzer_packages/fuzzedpackages/polywog/inst/testfiles/computePolyTerms/libFuzzer_computePolyTerms/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_degree.qs";
  qs::c_qsave(degree,degree_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "degree values: "<< degree << std::endl;
  IntegerVector k_expand(1);
  k_expand[0]  = RcppDeepState_int();
  std::string k_expand_t = "/home/akhila/fuzzer_packages/fuzzedpackages/polywog/inst/testfiles/computePolyTerms/libFuzzer_computePolyTerms/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_k_expand.qs";
  qs::c_qsave(k_expand,k_expand_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "k_expand values: "<< k_expand << std::endl;
  IntegerVector k_lin(1);
  k_lin[0]  = RcppDeepState_int();
  std::string k_lin_t = "/home/akhila/fuzzer_packages/fuzzedpackages/polywog/inst/testfiles/computePolyTerms/libFuzzer_computePolyTerms/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_k_lin.qs";
  qs::c_qsave(k_lin,k_lin_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "k_lin values: "<< k_lin << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    computePolyTerms(degree[0],k_expand[0],k_lin[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
