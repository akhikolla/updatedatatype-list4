// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// calc_account_DeepState_TestHarness_generation.cpp and calc_account_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector calc_account(const NumericVector& spot, const NumericVector& ben, double fee, double barrier, const NumericVector& penalty);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector spot  = RcppDeepState_NumericVector();
  std::string spot_t = "/home/akhila/fuzzer_packages/fuzzedpackages/valuer/inst/testfiles/calc_account/libFuzzer_calc_account/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_spot.qs";
  qs::c_qsave(spot,spot_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "spot values: "<< spot << std::endl;
  NumericVector ben  = RcppDeepState_NumericVector();
  std::string ben_t = "/home/akhila/fuzzer_packages/fuzzedpackages/valuer/inst/testfiles/calc_account/libFuzzer_calc_account/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ben.qs";
  qs::c_qsave(ben,ben_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ben values: "<< ben << std::endl;
  NumericVector fee(1);
  fee[0]  = RcppDeepState_double();
  std::string fee_t = "/home/akhila/fuzzer_packages/fuzzedpackages/valuer/inst/testfiles/calc_account/libFuzzer_calc_account/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_fee.qs";
  qs::c_qsave(fee,fee_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "fee values: "<< fee << std::endl;
  NumericVector barrier(1);
  barrier[0]  = RcppDeepState_double();
  std::string barrier_t = "/home/akhila/fuzzer_packages/fuzzedpackages/valuer/inst/testfiles/calc_account/libFuzzer_calc_account/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_barrier.qs";
  qs::c_qsave(barrier,barrier_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "barrier values: "<< barrier << std::endl;
  NumericVector penalty  = RcppDeepState_NumericVector();
  std::string penalty_t = "/home/akhila/fuzzer_packages/fuzzedpackages/valuer/inst/testfiles/calc_account/libFuzzer_calc_account/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_penalty.qs";
  qs::c_qsave(penalty,penalty_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "penalty values: "<< penalty << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    calc_account(spot,ben,fee[0],barrier[0],penalty);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
