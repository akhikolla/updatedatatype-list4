// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// allhistparallelcpp_DeepState_TestHarness_generation.cpp and allhistparallelcpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector allhistparallelcpp(int x, int type, int nc, int CJSp1, int grain, const NumericVector intervals, const IntegerVector cumss, const IntegerVector w, const IntegerVector fi, const IntegerVector li, const NumericMatrix openval, const IntegerVector PIA, const IntegerVector PIAJ);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  IntegerVector x(1);
  x[0]  = RcppDeepState_int();
  qs::c_qsave(x,"/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/allhistparallelcpp/inputs/x.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  IntegerVector type(1);
  type[0]  = RcppDeepState_int();
  qs::c_qsave(type,"/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/allhistparallelcpp/inputs/type.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "type values: "<< type << std::endl;
  IntegerVector nc(1);
  nc[0]  = RcppDeepState_int();
  qs::c_qsave(nc,"/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/allhistparallelcpp/inputs/nc.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nc values: "<< nc << std::endl;
  IntegerVector CJSp1(1);
  CJSp1[0]  = RcppDeepState_int();
  qs::c_qsave(CJSp1,"/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/allhistparallelcpp/inputs/CJSp1.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "CJSp1 values: "<< CJSp1 << std::endl;
  IntegerVector grain(1);
  grain[0]  = RcppDeepState_int();
  qs::c_qsave(grain,"/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/allhistparallelcpp/inputs/grain.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "grain values: "<< grain << std::endl;
  NumericVector intervals  = RcppDeepState_NumericVector();
  qs::c_qsave(intervals,"/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/allhistparallelcpp/inputs/intervals.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "intervals values: "<< intervals << std::endl;
  IntegerVector cumss  = RcppDeepState_IntegerVector();
  qs::c_qsave(cumss,"/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/allhistparallelcpp/inputs/cumss.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "cumss values: "<< cumss << std::endl;
  IntegerVector w  = RcppDeepState_IntegerVector();
  qs::c_qsave(w,"/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/allhistparallelcpp/inputs/w.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "w values: "<< w << std::endl;
  IntegerVector fi  = RcppDeepState_IntegerVector();
  qs::c_qsave(fi,"/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/allhistparallelcpp/inputs/fi.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "fi values: "<< fi << std::endl;
  IntegerVector li  = RcppDeepState_IntegerVector();
  qs::c_qsave(li,"/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/allhistparallelcpp/inputs/li.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "li values: "<< li << std::endl;
  NumericMatrix openval  = RcppDeepState_NumericMatrix();
  qs::c_qsave(openval,"/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/allhistparallelcpp/inputs/openval.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "openval values: "<< openval << std::endl;
  IntegerVector PIA  = RcppDeepState_IntegerVector();
  qs::c_qsave(PIA,"/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/allhistparallelcpp/inputs/PIA.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "PIA values: "<< PIA << std::endl;
  IntegerVector PIAJ  = RcppDeepState_IntegerVector();
  qs::c_qsave(PIAJ,"/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/allhistparallelcpp/inputs/PIAJ.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "PIAJ values: "<< PIAJ << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    allhistparallelcpp(x[0],type[0],nc[0],CJSp1[0],grain[0],intervals,cumss,w,fi,li,openval,PIA,PIAJ);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
