// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// pradelloglikcpp_DeepState_TestHarness_generation.cpp and pradelloglikcpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector pradelloglikcpp(int type, const IntegerVector w, int nc, int jj, int nmix, const NumericMatrix openval, const IntegerVector PIAJ, const NumericVector intervals);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector type(1);
  type[0]  = RcppDeepState_int();
  std::string type_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/pradelloglikcpp/libFuzzer_pradelloglikcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_type.qs";
  qs::c_qsave(type,type_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "type values: "<< type << std::endl;
  IntegerVector w  = RcppDeepState_IntegerVector();
  std::string w_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/pradelloglikcpp/libFuzzer_pradelloglikcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_w.qs";
  qs::c_qsave(w,w_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "w values: "<< w << std::endl;
  IntegerVector nc(1);
  nc[0]  = RcppDeepState_int();
  std::string nc_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/pradelloglikcpp/libFuzzer_pradelloglikcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nc.qs";
  qs::c_qsave(nc,nc_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nc values: "<< nc << std::endl;
  IntegerVector jj(1);
  jj[0]  = RcppDeepState_int();
  std::string jj_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/pradelloglikcpp/libFuzzer_pradelloglikcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_jj.qs";
  qs::c_qsave(jj,jj_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "jj values: "<< jj << std::endl;
  IntegerVector nmix(1);
  nmix[0]  = RcppDeepState_int();
  std::string nmix_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/pradelloglikcpp/libFuzzer_pradelloglikcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nmix.qs";
  qs::c_qsave(nmix,nmix_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nmix values: "<< nmix << std::endl;
  NumericMatrix openval  = RcppDeepState_NumericMatrix();
  std::string openval_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/pradelloglikcpp/libFuzzer_pradelloglikcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_openval.qs";
  qs::c_qsave(openval,openval_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "openval values: "<< openval << std::endl;
  IntegerVector PIAJ  = RcppDeepState_IntegerVector();
  std::string PIAJ_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/pradelloglikcpp/libFuzzer_pradelloglikcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_PIAJ.qs";
  qs::c_qsave(PIAJ,PIAJ_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "PIAJ values: "<< PIAJ << std::endl;
  NumericVector intervals  = RcppDeepState_NumericVector();
  std::string intervals_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/pradelloglikcpp/libFuzzer_pradelloglikcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_intervals.qs";
  qs::c_qsave(intervals,intervals_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "intervals values: "<< intervals << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    pradelloglikcpp(type[0],w,nc[0],jj[0],nmix[0],openval,PIAJ,intervals);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
