// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// gethcpp_DeepState_TestHarness_generation.cpp and gethcpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List gethcpp(int nc1, int cc, int nmix, int nk, int ss, int mm, const IntegerVector PIA, const NumericMatrix Tsk, const NumericVector hk);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector nc1(1);
  nc1[0]  = RcppDeepState_int();
  std::string nc1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/gethcpp/libFuzzer_gethcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nc1.qs";
  qs::c_qsave(nc1,nc1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nc1 values: "<< nc1 << std::endl;
  IntegerVector cc(1);
  cc[0]  = RcppDeepState_int();
  std::string cc_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/gethcpp/libFuzzer_gethcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_cc.qs";
  qs::c_qsave(cc,cc_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "cc values: "<< cc << std::endl;
  IntegerVector nmix(1);
  nmix[0]  = RcppDeepState_int();
  std::string nmix_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/gethcpp/libFuzzer_gethcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nmix.qs";
  qs::c_qsave(nmix,nmix_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nmix values: "<< nmix << std::endl;
  IntegerVector nk(1);
  nk[0]  = RcppDeepState_int();
  std::string nk_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/gethcpp/libFuzzer_gethcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nk.qs";
  qs::c_qsave(nk,nk_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nk values: "<< nk << std::endl;
  IntegerVector ss(1);
  ss[0]  = RcppDeepState_int();
  std::string ss_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/gethcpp/libFuzzer_gethcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ss.qs";
  qs::c_qsave(ss,ss_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ss values: "<< ss << std::endl;
  IntegerVector mm(1);
  mm[0]  = RcppDeepState_int();
  std::string mm_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/gethcpp/libFuzzer_gethcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_mm.qs";
  qs::c_qsave(mm,mm_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mm values: "<< mm << std::endl;
  IntegerVector PIA  = RcppDeepState_IntegerVector();
  std::string PIA_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/gethcpp/libFuzzer_gethcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_PIA.qs";
  qs::c_qsave(PIA,PIA_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "PIA values: "<< PIA << std::endl;
  NumericMatrix Tsk  = RcppDeepState_NumericMatrix();
  std::string Tsk_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/gethcpp/libFuzzer_gethcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Tsk.qs";
  qs::c_qsave(Tsk,Tsk_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Tsk values: "<< Tsk << std::endl;
  NumericVector hk  = RcppDeepState_NumericVector();
  std::string hk_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/gethcpp/libFuzzer_gethcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_hk.qs";
  qs::c_qsave(hk,hk_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "hk values: "<< hk << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    gethcpp(nc1[0],cc[0],nmix[0],nk[0],ss[0],mm[0],PIA,Tsk,hk);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
