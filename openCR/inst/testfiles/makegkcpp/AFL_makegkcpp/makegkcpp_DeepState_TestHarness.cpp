// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// makegkcpp_DeepState_TestHarness_generation.cpp and makegkcpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List makegkcpp(int cc, int kk, int mm, int detectfn, int sigmai, const NumericMatrix openval, const NumericMatrix traps, const NumericMatrix mask);

TEST(,){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector cc(1);
  cc[0]  = RcppDeepState_int();
  std::string cc_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/makegkcpp/AFL_makegkcpp/afl_inputs/" + std::to_string(t) + "_cc.qs";
  qs::c_qsave(cc,cc_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "cc values: "<< cc << std::endl;
  IntegerVector kk(1);
  kk[0]  = RcppDeepState_int();
  std::string kk_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/makegkcpp/AFL_makegkcpp/afl_inputs/" + std::to_string(t) + "_kk.qs";
  qs::c_qsave(kk,kk_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kk values: "<< kk << std::endl;
  IntegerVector mm(1);
  mm[0]  = RcppDeepState_int();
  std::string mm_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/makegkcpp/AFL_makegkcpp/afl_inputs/" + std::to_string(t) + "_mm.qs";
  qs::c_qsave(mm,mm_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mm values: "<< mm << std::endl;
  IntegerVector detectfn(1);
  detectfn[0]  = RcppDeepState_int();
  std::string detectfn_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/makegkcpp/AFL_makegkcpp/afl_inputs/" + std::to_string(t) + "_detectfn.qs";
  qs::c_qsave(detectfn,detectfn_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "detectfn values: "<< detectfn << std::endl;
  IntegerVector sigmai(1);
  sigmai[0]  = RcppDeepState_int();
  std::string sigmai_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/makegkcpp/AFL_makegkcpp/afl_inputs/" + std::to_string(t) + "_sigmai.qs";
  qs::c_qsave(sigmai,sigmai_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sigmai values: "<< sigmai << std::endl;
  NumericMatrix openval  = RcppDeepState_NumericMatrix();
  std::string openval_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/makegkcpp/AFL_makegkcpp/afl_inputs/" + std::to_string(t) + "_openval.qs";
  qs::c_qsave(openval,openval_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "openval values: "<< openval << std::endl;
  NumericMatrix traps  = RcppDeepState_NumericMatrix();
  std::string traps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/makegkcpp/AFL_makegkcpp/afl_inputs/" + std::to_string(t) + "_traps.qs";
  qs::c_qsave(traps,traps_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "traps values: "<< traps << std::endl;
  NumericMatrix mask  = RcppDeepState_NumericMatrix();
  std::string mask_t = "/home/akhila/fuzzer_packages/fuzzedpackages/openCR/inst/testfiles/makegkcpp/AFL_makegkcpp/afl_inputs/" + std::to_string(t) + "_mask.qs";
  qs::c_qsave(mask,mask_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mask values: "<< mask << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    makegkcpp(cc[0],kk[0],mm[0],detectfn[0],sigmai[0],openval,traps,mask);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
