// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// stopping_criteria_DeepState_TestHarness_generation.cpp and stopping_criteria_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

int stopping_criteria(NumericMatrix mu, NumericMatrix mu1, int ndim, int numbers, int count, double epsilon);

TEST(,){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix mu  = RcppDeepState_NumericMatrix();
  std::string mu_t = "/home/akhila/fuzzer_packages/fuzzedpackages/prclust/inst/testfiles/stopping_criteria/AFL_stopping_criteria/afl_inputs/" + std::to_string(t) + "_mu.qs";
  qs::c_qsave(mu,mu_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mu values: "<< mu << std::endl;
  NumericMatrix mu1  = RcppDeepState_NumericMatrix();
  std::string mu_t = "/home/akhila/fuzzer_packages/fuzzedpackages/prclust/inst/testfiles/stopping_criteria/AFL_stopping_criteria/afl_inputs/" + std::to_string(t) + "_mu.qs";
  std::string mu1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/prclust/inst/testfiles/stopping_criteria/AFL_stopping_criteria/afl_inputs/" + std::to_string(t) + "_mu1.qs";
  qs::c_qsave(mu1,mu1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mu1 values: "<< mu1 << std::endl;
  IntegerVector ndim(1);
  ndim[0]  = RcppDeepState_int();
  std::string ndim_t = "/home/akhila/fuzzer_packages/fuzzedpackages/prclust/inst/testfiles/stopping_criteria/AFL_stopping_criteria/afl_inputs/" + std::to_string(t) + "_ndim.qs";
  qs::c_qsave(ndim,ndim_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ndim values: "<< ndim << std::endl;
  IntegerVector numbers(1);
  numbers[0]  = RcppDeepState_int();
  std::string numbers_t = "/home/akhila/fuzzer_packages/fuzzedpackages/prclust/inst/testfiles/stopping_criteria/AFL_stopping_criteria/afl_inputs/" + std::to_string(t) + "_numbers.qs";
  qs::c_qsave(numbers,numbers_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "numbers values: "<< numbers << std::endl;
  IntegerVector count(1);
  count[0]  = RcppDeepState_int();
  std::string count_t = "/home/akhila/fuzzer_packages/fuzzedpackages/prclust/inst/testfiles/stopping_criteria/AFL_stopping_criteria/afl_inputs/" + std::to_string(t) + "_count.qs";
  qs::c_qsave(count,count_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "count values: "<< count << std::endl;
  NumericVector epsilon(1);
  epsilon[0]  = RcppDeepState_double();
  std::string epsilon_t = "/home/akhila/fuzzer_packages/fuzzedpackages/prclust/inst/testfiles/stopping_criteria/AFL_stopping_criteria/afl_inputs/" + std::to_string(t) + "_epsilon.qs";
  qs::c_qsave(epsilon,epsilon_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "epsilon values: "<< epsilon << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    stopping_criteria(mu,mu1,ndim[0],numbers[0],count[0],epsilon[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
