// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// HoOneParent_DeepState_TestHarness_generation.cpp and HoOneParent_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector HoOneParent(IntegerVector genotypes, IntegerVector alleles2loc, IntegerVector keeploc, double ploidy);

TEST(,){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector genotypes  = RcppDeepState_IntegerVector();
  std::string genotypes_t = "/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/HoOneParent/AFL_HoOneParent/afl_inputs/" + std::to_string(t) + "_genotypes.qs";
  qs::c_qsave(genotypes,genotypes_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "genotypes values: "<< genotypes << std::endl;
  IntegerVector alleles2loc  = RcppDeepState_IntegerVector();
  std::string alleles2loc_t = "/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/HoOneParent/AFL_HoOneParent/afl_inputs/" + std::to_string(t) + "_alleles2loc.qs";
  qs::c_qsave(alleles2loc,alleles2loc_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alleles2loc values: "<< alleles2loc << std::endl;
  IntegerVector keeploc  = RcppDeepState_IntegerVector();
  std::string keeploc_t = "/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/HoOneParent/AFL_HoOneParent/afl_inputs/" + std::to_string(t) + "_keeploc.qs";
  qs::c_qsave(keeploc,keeploc_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "keeploc values: "<< keeploc << std::endl;
  NumericVector ploidy(1);
  ploidy[0]  = RcppDeepState_double();
  std::string ploidy_t = "/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/HoOneParent/AFL_HoOneParent/afl_inputs/" + std::to_string(t) + "_ploidy.qs";
  qs::c_qsave(ploidy,ploidy_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ploidy values: "<< ploidy << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    HoOneParent(genotypes,alleles2loc,keeploc,ploidy[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
