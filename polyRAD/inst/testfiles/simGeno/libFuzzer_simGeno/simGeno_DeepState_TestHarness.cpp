// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// simGeno_DeepState_TestHarness_generation.cpp and simGeno_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix simGeno(NumericVector alleleFreq, IntegerVector alleles2loc, int nsam, double inbreeding, int ploidy);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector alleleFreq  = RcppDeepState_NumericVector();
  std::string alleleFreq_t = "/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/simGeno/libFuzzer_simGeno/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_alleleFreq.qs";
  qs::c_qsave(alleleFreq,alleleFreq_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alleleFreq values: "<< alleleFreq << std::endl;
  IntegerVector alleles2loc  = RcppDeepState_IntegerVector();
  std::string alleles2loc_t = "/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/simGeno/libFuzzer_simGeno/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_alleles2loc.qs";
  qs::c_qsave(alleles2loc,alleles2loc_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alleles2loc values: "<< alleles2loc << std::endl;
  IntegerVector nsam(1);
  nsam[0]  = RcppDeepState_int();
  std::string nsam_t = "/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/simGeno/libFuzzer_simGeno/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nsam.qs";
  qs::c_qsave(nsam,nsam_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nsam values: "<< nsam << std::endl;
  NumericVector inbreeding(1);
  inbreeding[0]  = RcppDeepState_double();
  std::string inbreeding_t = "/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/simGeno/libFuzzer_simGeno/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_inbreeding.qs";
  qs::c_qsave(inbreeding,inbreeding_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "inbreeding values: "<< inbreeding << std::endl;
  IntegerVector ploidy(1);
  ploidy[0]  = RcppDeepState_int();
  std::string ploidy_t = "/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/simGeno/libFuzzer_simGeno/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ploidy.qs";
  qs::c_qsave(ploidy,ploidy_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ploidy values: "<< ploidy << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    simGeno(alleleFreq,alleles2loc,nsam[0],inbreeding[0],ploidy[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
