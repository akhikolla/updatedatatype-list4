// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// simGeno_DeepState_TestHarness_generation.cpp and simGeno_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix simGeno(NumericVector alleleFreq, IntegerVector alleles2loc, int nsam, double inbreeding, int ploidy);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector alleleFreq  = RcppDeepState_NumericVector();
  qs::c_qsave(alleleFreq,"/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/simGeno/inputs/alleleFreq.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alleleFreq values: "<< alleleFreq << std::endl;
  IntegerVector alleles2loc  = RcppDeepState_IntegerVector();
  qs::c_qsave(alleles2loc,"/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/simGeno/inputs/alleles2loc.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alleles2loc values: "<< alleles2loc << std::endl;
  IntegerVector nsam(1);
  nsam[0]  = RcppDeepState_int();
  qs::c_qsave(nsam,"/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/simGeno/inputs/nsam.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nsam values: "<< nsam << std::endl;
  NumericVector inbreeding(1);
  inbreeding[0]  = RcppDeepState_double();
  qs::c_qsave(inbreeding,"/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/simGeno/inputs/inbreeding.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "inbreeding values: "<< inbreeding << std::endl;
  IntegerVector ploidy(1);
  ploidy[0]  = RcppDeepState_int();
  qs::c_qsave(ploidy,"/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/simGeno/inputs/ploidy.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ploidy values: "<< ploidy << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    simGeno(alleleFreq,alleles2loc,nsam[0],inbreeding[0],ploidy[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
