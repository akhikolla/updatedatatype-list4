// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// BestGenos_DeepState_TestHarness_generation.cpp and BestGenos_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

IntegerMatrix BestGenos(NumericVector probs, int ploidy, int ntaxa, int nalleles);

TEST(,){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector probs  = RcppDeepState_NumericVector();
  std::string probs_t = "/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/BestGenos/AFL_BestGenos/afl_inputs/" + std::to_string(t) + "_probs.qs";
  qs::c_qsave(probs,probs_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "probs values: "<< probs << std::endl;
  IntegerVector ploidy(1);
  ploidy[0]  = RcppDeepState_int();
  std::string ploidy_t = "/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/BestGenos/AFL_BestGenos/afl_inputs/" + std::to_string(t) + "_ploidy.qs";
  qs::c_qsave(ploidy,ploidy_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ploidy values: "<< ploidy << std::endl;
  IntegerVector ntaxa(1);
  ntaxa[0]  = RcppDeepState_int();
  std::string ntaxa_t = "/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/BestGenos/AFL_BestGenos/afl_inputs/" + std::to_string(t) + "_ntaxa.qs";
  qs::c_qsave(ntaxa,ntaxa_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ntaxa values: "<< ntaxa << std::endl;
  IntegerVector nalleles(1);
  nalleles[0]  = RcppDeepState_int();
  std::string nalleles_t = "/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/BestGenos/AFL_BestGenos/afl_inputs/" + std::to_string(t) + "_nalleles.qs";
  qs::c_qsave(nalleles,nalleles_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nalleles values: "<< nalleles << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    BestGenos(probs,ploidy[0],ntaxa[0],nalleles[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
