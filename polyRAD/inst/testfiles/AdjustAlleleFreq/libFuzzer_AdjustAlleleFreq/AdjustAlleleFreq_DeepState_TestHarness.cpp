// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// AdjustAlleleFreq_DeepState_TestHarness_generation.cpp and AdjustAlleleFreq_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix AdjustAlleleFreq(NumericMatrix predAl, IntegerVector alleles2loc, double minfreq);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix predAl  = RcppDeepState_NumericMatrix();
  std::string predAl_t = "/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/AdjustAlleleFreq/libFuzzer_AdjustAlleleFreq/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_predAl.qs";
  qs::c_qsave(predAl,predAl_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "predAl values: "<< predAl << std::endl;
  IntegerVector alleles2loc  = RcppDeepState_IntegerVector();
  std::string alleles2loc_t = "/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/AdjustAlleleFreq/libFuzzer_AdjustAlleleFreq/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_alleles2loc.qs";
  qs::c_qsave(alleles2loc,alleles2loc_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alleles2loc values: "<< alleles2loc << std::endl;
  NumericVector minfreq(1);
  minfreq[0]  = RcppDeepState_double();
  std::string minfreq_t = "/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/AdjustAlleleFreq/libFuzzer_AdjustAlleleFreq/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_minfreq.qs";
  qs::c_qsave(minfreq,minfreq_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "minfreq values: "<< minfreq << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    AdjustAlleleFreq(predAl,alleles2loc,minfreq[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
