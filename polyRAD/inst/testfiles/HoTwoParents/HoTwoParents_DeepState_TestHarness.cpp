// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// HoTwoParents_DeepState_TestHarness_generation.cpp and HoTwoParents_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector HoTwoParents(IntegerVector genotypes1, IntegerVector genotypes2, IntegerVector alleles2loc, IntegerVector keeploc, double ploidy);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  IntegerVector genotypes1  = RcppDeepState_IntegerVector();
  qs::c_qsave(genotypes1,"/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/HoTwoParents/inputs/genotypes1.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "genotypes1 values: "<< genotypes1 << std::endl;
  IntegerVector genotypes2  = RcppDeepState_IntegerVector();
  qs::c_qsave(genotypes2,"/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/HoTwoParents/inputs/genotypes2.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "genotypes2 values: "<< genotypes2 << std::endl;
  IntegerVector alleles2loc  = RcppDeepState_IntegerVector();
  qs::c_qsave(alleles2loc,"/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/HoTwoParents/inputs/alleles2loc.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alleles2loc values: "<< alleles2loc << std::endl;
  IntegerVector keeploc  = RcppDeepState_IntegerVector();
  qs::c_qsave(keeploc,"/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/HoTwoParents/inputs/keeploc.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "keeploc values: "<< keeploc << std::endl;
  NumericVector ploidy(1);
  ploidy[0]  = RcppDeepState_double();
  qs::c_qsave(ploidy,"/home/akhila/fuzzer_packages/fuzzedpackages/polyRAD/inst/testfiles/HoTwoParents/inputs/ploidy.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ploidy values: "<< ploidy << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    HoTwoParents(genotypes1,genotypes2,alleles2loc,keeploc,ploidy[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
