// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// tree_search_rcpp_DeepState_TestHarness_generation.cpp and tree_search_rcpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List tree_search_rcpp(const Rcpp::NumericMatrix& X, const Rcpp::NumericMatrix& Y, int depth, int split_step);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix X  = RcppDeepState_NumericMatrix();
  qs::c_qsave(X,"/home/akhila/fuzzer_packages/fuzzedpackages/policytree/inst/testfiles/tree_search_rcpp/inputs/X.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "X values: "<< X << std::endl;
  NumericMatrix Y  = RcppDeepState_NumericMatrix();
  qs::c_qsave(Y,"/home/akhila/fuzzer_packages/fuzzedpackages/policytree/inst/testfiles/tree_search_rcpp/inputs/Y.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Y values: "<< Y << std::endl;
  IntegerVector depth(1);
  depth[0]  = RcppDeepState_int();
  qs::c_qsave(depth,"/home/akhila/fuzzer_packages/fuzzedpackages/policytree/inst/testfiles/tree_search_rcpp/inputs/depth.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "depth values: "<< depth << std::endl;
  IntegerVector split_step(1);
  split_step[0]  = RcppDeepState_int();
  qs::c_qsave(split_step,"/home/akhila/fuzzer_packages/fuzzedpackages/policytree/inst/testfiles/tree_search_rcpp/inputs/split_step.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "split_step values: "<< split_step << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    tree_search_rcpp(X,Y,depth[0],split_step[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
