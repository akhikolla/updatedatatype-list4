// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// pagelLogLik_DeepState_TestHarness_generation.cpp and pagelLogLik_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double pagelLogLik(double lambda, NumericVector xr, NumericMatrix vcvr);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector lambda(1);
  lambda[0]  = RcppDeepState_double();
  qs::c_qsave(lambda,"/home/akhila/fuzzer_packages/fuzzedpackages/phylosignal/inst/testfiles/pagelLogLik/inputs/lambda.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda values: "<< lambda << std::endl;
  NumericVector xr  = RcppDeepState_NumericVector();
  qs::c_qsave(xr,"/home/akhila/fuzzer_packages/fuzzedpackages/phylosignal/inst/testfiles/pagelLogLik/inputs/xr.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "xr values: "<< xr << std::endl;
  NumericMatrix vcvr  = RcppDeepState_NumericMatrix();
  qs::c_qsave(vcvr,"/home/akhila/fuzzer_packages/fuzzedpackages/phylosignal/inst/testfiles/pagelLogLik/inputs/vcvr.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "vcvr values: "<< vcvr << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    pagelLogLik(lambda[0],xr,vcvr);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
