// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// pagelLogLik_DeepState_TestHarness_generation.cpp and pagelLogLik_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double pagelLogLik(double lambda, NumericVector xr, NumericMatrix vcvr);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector lambda(1);
  lambda[0]  = RcppDeepState_double();
  std::string lambda_t = "/home/akhila/fuzzer_packages/fuzzedpackages/phylosignal/inst/testfiles/pagelLogLik/libFuzzer_pagelLogLik/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lambda.qs";
  qs::c_qsave(lambda,lambda_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda values: "<< lambda << std::endl;
  NumericVector xr  = RcppDeepState_NumericVector();
  std::string xr_t = "/home/akhila/fuzzer_packages/fuzzedpackages/phylosignal/inst/testfiles/pagelLogLik/libFuzzer_pagelLogLik/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_xr.qs";
  qs::c_qsave(xr,xr_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "xr values: "<< xr << std::endl;
  NumericMatrix vcvr  = RcppDeepState_NumericMatrix();
  std::string vcvr_t = "/home/akhila/fuzzer_packages/fuzzedpackages/phylosignal/inst/testfiles/pagelLogLik/libFuzzer_pagelLogLik/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_vcvr.qs";
  qs::c_qsave(vcvr,vcvr_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "vcvr values: "<< vcvr << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    pagelLogLik(lambda[0],xr,vcvr);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
