// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// pvmr_par_c_DeepState_TestHarness_generation.cpp and pvmr_par_c_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double pvmr_par_c(double rho, double sigma_M, double sigma_R);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector rho(1);
  rho[0]  = RcppDeepState_double();
  qs::c_qsave(rho,"/home/akhila/fuzzer_packages/fuzzedpackages/partialAR/inst/testfiles/pvmr_par_c/inputs/rho.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rho values: "<< rho << std::endl;
  NumericVector sigma_M(1);
  sigma_M[0]  = RcppDeepState_double();
  qs::c_qsave(sigma_M,"/home/akhila/fuzzer_packages/fuzzedpackages/partialAR/inst/testfiles/pvmr_par_c/inputs/sigma_M.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sigma_M values: "<< sigma_M << std::endl;
  NumericVector sigma_R(1);
  sigma_R[0]  = RcppDeepState_double();
  qs::c_qsave(sigma_R,"/home/akhila/fuzzer_packages/fuzzedpackages/partialAR/inst/testfiles/pvmr_par_c/inputs/sigma_R.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sigma_R values: "<< sigma_R << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    pvmr_par_c(rho[0],sigma_M[0],sigma_R[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
