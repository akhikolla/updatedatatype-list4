// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// kalman_gain_par_mr_DeepState_TestHarness_generation.cpp and kalman_gain_par_mr_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double kalman_gain_par_mr(double rho, double sigma_M, double sigma_R);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector rho(1);
  rho[0]  = RcppDeepState_double();
  std::string rho_t = "/home/akhila/fuzzer_packages/fuzzedpackages/partialAR/inst/testfiles/kalman_gain_par_mr/libFuzzer_kalman_gain_par_mr/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_rho.qs";
  qs::c_qsave(rho,rho_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rho values: "<< rho << std::endl;
  NumericVector sigma_M(1);
  sigma_M[0]  = RcppDeepState_double();
  std::string sigma_M_t = "/home/akhila/fuzzer_packages/fuzzedpackages/partialAR/inst/testfiles/kalman_gain_par_mr/libFuzzer_kalman_gain_par_mr/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_sigma_M.qs";
  qs::c_qsave(sigma_M,sigma_M_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sigma_M values: "<< sigma_M << std::endl;
  NumericVector sigma_R(1);
  sigma_R[0]  = RcppDeepState_double();
  std::string sigma_R_t = "/home/akhila/fuzzer_packages/fuzzedpackages/partialAR/inst/testfiles/kalman_gain_par_mr/libFuzzer_kalman_gain_par_mr/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_sigma_R.qs";
  qs::c_qsave(sigma_R,sigma_R_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sigma_R values: "<< sigma_R << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    kalman_gain_par_mr(rho[0],sigma_M[0],sigma_R[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
